/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Actor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1825929772117959341L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Actor\",\"namespace\":\"com.github\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"display_login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"avatar_url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Actor> ENCODER =
      new BinaryMessageEncoder<Actor>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Actor> DECODER =
      new BinaryMessageDecoder<Actor>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Actor> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Actor> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Actor>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Actor to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Actor from a ByteBuffer. */
  public static Actor fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long id;
   private java.lang.String login;
   private java.lang.String display_login;
   private java.lang.String avatar_url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Actor() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param login The new value for login
   * @param display_login The new value for display_login
   * @param avatar_url The new value for avatar_url
   */
  public Actor(java.lang.Long id, java.lang.String login, java.lang.String display_login, java.lang.String avatar_url) {
    this.id = id;
    this.login = login;
    this.display_login = display_login;
    this.avatar_url = avatar_url;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return login;
    case 2: return display_login;
    case 3: return avatar_url;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: login = (java.lang.String)value$; break;
    case 2: display_login = (java.lang.String)value$; break;
    case 3: avatar_url = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Gets the value of the 'login' field.
   * @return The value of the 'login' field.
   */
  public java.lang.String getLogin() {
    return login;
  }


  /**
   * Gets the value of the 'display_login' field.
   * @return The value of the 'display_login' field.
   */
  public java.lang.String getDisplayLogin() {
    return display_login;
  }


  /**
   * Gets the value of the 'avatar_url' field.
   * @return The value of the 'avatar_url' field.
   */
  public java.lang.String getAvatarUrl() {
    return avatar_url;
  }


  /**
   * Creates a new Actor RecordBuilder.
   * @return A new Actor RecordBuilder
   */
  public static com.github.Actor.Builder newBuilder() {
    return new com.github.Actor.Builder();
  }

  /**
   * Creates a new Actor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Actor RecordBuilder
   */
  public static com.github.Actor.Builder newBuilder(com.github.Actor.Builder other) {
    return new com.github.Actor.Builder(other);
  }

  /**
   * Creates a new Actor RecordBuilder by copying an existing Actor instance.
   * @param other The existing instance to copy.
   * @return A new Actor RecordBuilder
   */
  public static com.github.Actor.Builder newBuilder(com.github.Actor other) {
    return new com.github.Actor.Builder(other);
  }

  /**
   * RecordBuilder for Actor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Actor>
    implements org.apache.avro.data.RecordBuilder<Actor> {

    private long id;
    private java.lang.String login;
    private java.lang.String display_login;
    private java.lang.String avatar_url;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.Actor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.login)) {
        this.login = data().deepCopy(fields()[1].schema(), other.login);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.display_login)) {
        this.display_login = data().deepCopy(fields()[2].schema(), other.display_login);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.avatar_url)) {
        this.avatar_url = data().deepCopy(fields()[3].schema(), other.avatar_url);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Actor instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.Actor other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.login)) {
        this.login = data().deepCopy(fields()[1].schema(), other.login);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.display_login)) {
        this.display_login = data().deepCopy(fields()[2].schema(), other.display_login);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.avatar_url)) {
        this.avatar_url = data().deepCopy(fields()[3].schema(), other.avatar_url);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.Actor.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.github.Actor.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'login' field.
      * @return The value.
      */
    public java.lang.String getLogin() {
      return login;
    }

    /**
      * Sets the value of the 'login' field.
      * @param value The value of 'login'.
      * @return This builder.
      */
    public com.github.Actor.Builder setLogin(java.lang.String value) {
      validate(fields()[1], value);
      this.login = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'login' field has been set.
      * @return True if the 'login' field has been set, false otherwise.
      */
    public boolean hasLogin() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'login' field.
      * @return This builder.
      */
    public com.github.Actor.Builder clearLogin() {
      login = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'display_login' field.
      * @return The value.
      */
    public java.lang.String getDisplayLogin() {
      return display_login;
    }

    /**
      * Sets the value of the 'display_login' field.
      * @param value The value of 'display_login'.
      * @return This builder.
      */
    public com.github.Actor.Builder setDisplayLogin(java.lang.String value) {
      validate(fields()[2], value);
      this.display_login = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'display_login' field has been set.
      * @return True if the 'display_login' field has been set, false otherwise.
      */
    public boolean hasDisplayLogin() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'display_login' field.
      * @return This builder.
      */
    public com.github.Actor.Builder clearDisplayLogin() {
      display_login = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'avatar_url' field.
      * @return The value.
      */
    public java.lang.String getAvatarUrl() {
      return avatar_url;
    }

    /**
      * Sets the value of the 'avatar_url' field.
      * @param value The value of 'avatar_url'.
      * @return This builder.
      */
    public com.github.Actor.Builder setAvatarUrl(java.lang.String value) {
      validate(fields()[3], value);
      this.avatar_url = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'avatar_url' field has been set.
      * @return True if the 'avatar_url' field has been set, false otherwise.
      */
    public boolean hasAvatarUrl() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'avatar_url' field.
      * @return This builder.
      */
    public com.github.Actor.Builder clearAvatarUrl() {
      avatar_url = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Actor build() {
      try {
        Actor record = new Actor();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.login = fieldSetFlags()[1] ? this.login : (java.lang.String) defaultValue(fields()[1]);
        record.display_login = fieldSetFlags()[2] ? this.display_login : (java.lang.String) defaultValue(fields()[2]);
        record.avatar_url = fieldSetFlags()[3] ? this.avatar_url : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Actor>
    WRITER$ = (org.apache.avro.io.DatumWriter<Actor>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Actor>
    READER$ = (org.apache.avro.io.DatumReader<Actor>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
