/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PushCommit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4149691361569490913L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PushCommit\",\"namespace\":\"com.github\",\"fields\":[{\"name\":\"sha\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"author\",\"type\":{\"type\":\"record\",\"name\":\"PushAuthor\",\"fields\":[{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"distinct\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PushCommit> ENCODER =
      new BinaryMessageEncoder<PushCommit>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PushCommit> DECODER =
      new BinaryMessageDecoder<PushCommit>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PushCommit> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PushCommit> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PushCommit>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PushCommit to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PushCommit from a ByteBuffer. */
  public static PushCommit fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String sha;
   private com.github.PushAuthor author;
   private java.lang.String message;
   private boolean distinct;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PushCommit() {}

  /**
   * All-args constructor.
   * @param sha The new value for sha
   * @param author The new value for author
   * @param message The new value for message
   * @param distinct The new value for distinct
   */
  public PushCommit(java.lang.String sha, com.github.PushAuthor author, java.lang.String message, java.lang.Boolean distinct) {
    this.sha = sha;
    this.author = author;
    this.message = message;
    this.distinct = distinct;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sha;
    case 1: return author;
    case 2: return message;
    case 3: return distinct;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sha = (java.lang.String)value$; break;
    case 1: author = (com.github.PushAuthor)value$; break;
    case 2: message = (java.lang.String)value$; break;
    case 3: distinct = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sha' field.
   * @return The value of the 'sha' field.
   */
  public java.lang.String getSha() {
    return sha;
  }


  /**
   * Gets the value of the 'author' field.
   * @return The value of the 'author' field.
   */
  public com.github.PushAuthor getAuthor() {
    return author;
  }


  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }


  /**
   * Gets the value of the 'distinct' field.
   * @return The value of the 'distinct' field.
   */
  public java.lang.Boolean getDistinct() {
    return distinct;
  }


  /**
   * Creates a new PushCommit RecordBuilder.
   * @return A new PushCommit RecordBuilder
   */
  public static com.github.PushCommit.Builder newBuilder() {
    return new com.github.PushCommit.Builder();
  }

  /**
   * Creates a new PushCommit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PushCommit RecordBuilder
   */
  public static com.github.PushCommit.Builder newBuilder(com.github.PushCommit.Builder other) {
    return new com.github.PushCommit.Builder(other);
  }

  /**
   * Creates a new PushCommit RecordBuilder by copying an existing PushCommit instance.
   * @param other The existing instance to copy.
   * @return A new PushCommit RecordBuilder
   */
  public static com.github.PushCommit.Builder newBuilder(com.github.PushCommit other) {
    return new com.github.PushCommit.Builder(other);
  }

  /**
   * RecordBuilder for PushCommit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PushCommit>
    implements org.apache.avro.data.RecordBuilder<PushCommit> {

    private java.lang.String sha;
    private com.github.PushAuthor author;
    private com.github.PushAuthor.Builder authorBuilder;
    private java.lang.String message;
    private boolean distinct;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.PushCommit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sha)) {
        this.sha = data().deepCopy(fields()[0].schema(), other.sha);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = true;
      }
      if (other.hasAuthorBuilder()) {
        this.authorBuilder = com.github.PushAuthor.newBuilder(other.getAuthorBuilder());
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.distinct)) {
        this.distinct = data().deepCopy(fields()[3].schema(), other.distinct);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PushCommit instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.PushCommit other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sha)) {
        this.sha = data().deepCopy(fields()[0].schema(), other.sha);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = true;
      }
      this.authorBuilder = null;
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.distinct)) {
        this.distinct = data().deepCopy(fields()[3].schema(), other.distinct);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sha' field.
      * @return The value.
      */
    public java.lang.String getSha() {
      return sha;
    }

    /**
      * Sets the value of the 'sha' field.
      * @param value The value of 'sha'.
      * @return This builder.
      */
    public com.github.PushCommit.Builder setSha(java.lang.String value) {
      validate(fields()[0], value);
      this.sha = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sha' field has been set.
      * @return True if the 'sha' field has been set, false otherwise.
      */
    public boolean hasSha() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sha' field.
      * @return This builder.
      */
    public com.github.PushCommit.Builder clearSha() {
      sha = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'author' field.
      * @return The value.
      */
    public com.github.PushAuthor getAuthor() {
      return author;
    }

    /**
      * Sets the value of the 'author' field.
      * @param value The value of 'author'.
      * @return This builder.
      */
    public com.github.PushCommit.Builder setAuthor(com.github.PushAuthor value) {
      validate(fields()[1], value);
      this.authorBuilder = null;
      this.author = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'author' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.github.PushAuthor.Builder getAuthorBuilder() {
      if (authorBuilder == null) {
        if (hasAuthor()) {
          setAuthorBuilder(com.github.PushAuthor.newBuilder(author));
        } else {
          setAuthorBuilder(com.github.PushAuthor.newBuilder());
        }
      }
      return authorBuilder;
    }

    /**
     * Sets the Builder instance for the 'author' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.github.PushCommit.Builder setAuthorBuilder(com.github.PushAuthor.Builder value) {
      clearAuthor();
      authorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'author' field has an active Builder instance
     * @return True if the 'author' field has an active Builder instance
     */
    public boolean hasAuthorBuilder() {
      return authorBuilder != null;
    }

    /**
      * Clears the value of the 'author' field.
      * @return This builder.
      */
    public com.github.PushCommit.Builder clearAuthor() {
      author = null;
      authorBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.github.PushCommit.Builder setMessage(java.lang.String value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.github.PushCommit.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'distinct' field.
      * @return The value.
      */
    public java.lang.Boolean getDistinct() {
      return distinct;
    }

    /**
      * Sets the value of the 'distinct' field.
      * @param value The value of 'distinct'.
      * @return This builder.
      */
    public com.github.PushCommit.Builder setDistinct(boolean value) {
      validate(fields()[3], value);
      this.distinct = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'distinct' field has been set.
      * @return True if the 'distinct' field has been set, false otherwise.
      */
    public boolean hasDistinct() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'distinct' field.
      * @return This builder.
      */
    public com.github.PushCommit.Builder clearDistinct() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PushCommit build() {
      try {
        PushCommit record = new PushCommit();
        record.sha = fieldSetFlags()[0] ? this.sha : (java.lang.String) defaultValue(fields()[0]);
        if (authorBuilder != null) {
          record.author = this.authorBuilder.build();
        } else {
          record.author = fieldSetFlags()[1] ? this.author : (com.github.PushAuthor) defaultValue(fields()[1]);
        }
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.String) defaultValue(fields()[2]);
        record.distinct = fieldSetFlags()[3] ? this.distinct : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PushCommit>
    WRITER$ = (org.apache.avro.io.DatumWriter<PushCommit>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PushCommit>
    READER$ = (org.apache.avro.io.DatumReader<PushCommit>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
