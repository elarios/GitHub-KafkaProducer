/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PushEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3818615026476494152L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PushEvent\",\"namespace\":\"com.github\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"repo\",\"type\":{\"type\":\"record\",\"name\":\"Repo\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"actor\",\"type\":{\"type\":\"record\",\"name\":\"Actor\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"display_login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"avatar_url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"org\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Organization\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"payload\",\"type\":[{\"type\":\"record\",\"name\":\"Payload\",\"fields\":[{\"name\":\"push_id\",\"type\":\"long\"},{\"name\":\"size\",\"type\":\"int\"},{\"name\":\"distinct_size\",\"type\":\"int\"},{\"name\":\"ref\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"head\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"before\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"commits\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PushCommit\",\"fields\":[{\"name\":\"sha\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"author\",\"type\":{\"type\":\"record\",\"name\":\"PushAuthor\",\"fields\":[{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"distinct\",\"type\":\"boolean\"}]}}}]},\"null\"],\"default\":null},{\"name\":\"public\",\"type\":\"boolean\"},{\"name\":\"created_at\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PushEvent> ENCODER =
      new BinaryMessageEncoder<PushEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PushEvent> DECODER =
      new BinaryMessageDecoder<PushEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PushEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PushEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PushEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PushEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PushEvent from a ByteBuffer. */
  public static PushEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String id;
   private com.github.Repo repo;
   private com.github.Actor actor;
   private com.github.Organization org;
   private com.github.Payload payload;
   private boolean public$;
   private java.lang.String created_at;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PushEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param repo The new value for repo
   * @param actor The new value for actor
   * @param org The new value for org
   * @param payload The new value for payload
   * @param public$ The new value for public
   * @param created_at The new value for created_at
   */
  public PushEvent(java.lang.String id, com.github.Repo repo, com.github.Actor actor, com.github.Organization org, com.github.Payload payload, java.lang.Boolean public$, java.lang.String created_at) {
    this.id = id;
    this.repo = repo;
    this.actor = actor;
    this.org = org;
    this.payload = payload;
    this.public$ = public$;
    this.created_at = created_at;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return repo;
    case 2: return actor;
    case 3: return org;
    case 4: return payload;
    case 5: return public$;
    case 6: return created_at;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: repo = (com.github.Repo)value$; break;
    case 2: actor = (com.github.Actor)value$; break;
    case 3: org = (com.github.Organization)value$; break;
    case 4: payload = (com.github.Payload)value$; break;
    case 5: public$ = (java.lang.Boolean)value$; break;
    case 6: created_at = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Gets the value of the 'repo' field.
   * @return The value of the 'repo' field.
   */
  public com.github.Repo getRepo() {
    return repo;
  }


  /**
   * Gets the value of the 'actor' field.
   * @return The value of the 'actor' field.
   */
  public com.github.Actor getActor() {
    return actor;
  }


  /**
   * Gets the value of the 'org' field.
   * @return The value of the 'org' field.
   */
  public com.github.Organization getOrg() {
    return org;
  }


  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public com.github.Payload getPayload() {
    return payload;
  }


  /**
   * Gets the value of the 'public$' field.
   * @return The value of the 'public$' field.
   */
  public java.lang.Boolean getPublic$() {
    return public$;
  }


  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public java.lang.String getCreatedAt() {
    return created_at;
  }


  /**
   * Creates a new PushEvent RecordBuilder.
   * @return A new PushEvent RecordBuilder
   */
  public static com.github.PushEvent.Builder newBuilder() {
    return new com.github.PushEvent.Builder();
  }

  /**
   * Creates a new PushEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PushEvent RecordBuilder
   */
  public static com.github.PushEvent.Builder newBuilder(com.github.PushEvent.Builder other) {
    return new com.github.PushEvent.Builder(other);
  }

  /**
   * Creates a new PushEvent RecordBuilder by copying an existing PushEvent instance.
   * @param other The existing instance to copy.
   * @return A new PushEvent RecordBuilder
   */
  public static com.github.PushEvent.Builder newBuilder(com.github.PushEvent other) {
    return new com.github.PushEvent.Builder(other);
  }

  /**
   * RecordBuilder for PushEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PushEvent>
    implements org.apache.avro.data.RecordBuilder<PushEvent> {

    private java.lang.String id;
    private com.github.Repo repo;
    private com.github.Repo.Builder repoBuilder;
    private com.github.Actor actor;
    private com.github.Actor.Builder actorBuilder;
    private com.github.Organization org;
    private com.github.Organization.Builder orgBuilder;
    private com.github.Payload payload;
    private com.github.Payload.Builder payloadBuilder;
    private boolean public$;
    private java.lang.String created_at;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.PushEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.repo)) {
        this.repo = data().deepCopy(fields()[1].schema(), other.repo);
        fieldSetFlags()[1] = true;
      }
      if (other.hasRepoBuilder()) {
        this.repoBuilder = com.github.Repo.newBuilder(other.getRepoBuilder());
      }
      if (isValidValue(fields()[2], other.actor)) {
        this.actor = data().deepCopy(fields()[2].schema(), other.actor);
        fieldSetFlags()[2] = true;
      }
      if (other.hasActorBuilder()) {
        this.actorBuilder = com.github.Actor.newBuilder(other.getActorBuilder());
      }
      if (isValidValue(fields()[3], other.org)) {
        this.org = data().deepCopy(fields()[3].schema(), other.org);
        fieldSetFlags()[3] = true;
      }
      if (other.hasOrgBuilder()) {
        this.orgBuilder = com.github.Organization.newBuilder(other.getOrgBuilder());
      }
      if (isValidValue(fields()[4], other.payload)) {
        this.payload = data().deepCopy(fields()[4].schema(), other.payload);
        fieldSetFlags()[4] = true;
      }
      if (other.hasPayloadBuilder()) {
        this.payloadBuilder = com.github.Payload.newBuilder(other.getPayloadBuilder());
      }
      if (isValidValue(fields()[5], other.public$)) {
        this.public$ = data().deepCopy(fields()[5].schema(), other.public$);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.created_at)) {
        this.created_at = data().deepCopy(fields()[6].schema(), other.created_at);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PushEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.PushEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.repo)) {
        this.repo = data().deepCopy(fields()[1].schema(), other.repo);
        fieldSetFlags()[1] = true;
      }
      this.repoBuilder = null;
      if (isValidValue(fields()[2], other.actor)) {
        this.actor = data().deepCopy(fields()[2].schema(), other.actor);
        fieldSetFlags()[2] = true;
      }
      this.actorBuilder = null;
      if (isValidValue(fields()[3], other.org)) {
        this.org = data().deepCopy(fields()[3].schema(), other.org);
        fieldSetFlags()[3] = true;
      }
      this.orgBuilder = null;
      if (isValidValue(fields()[4], other.payload)) {
        this.payload = data().deepCopy(fields()[4].schema(), other.payload);
        fieldSetFlags()[4] = true;
      }
      this.payloadBuilder = null;
      if (isValidValue(fields()[5], other.public$)) {
        this.public$ = data().deepCopy(fields()[5].schema(), other.public$);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.created_at)) {
        this.created_at = data().deepCopy(fields()[6].schema(), other.created_at);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.PushEvent.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.github.PushEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'repo' field.
      * @return The value.
      */
    public com.github.Repo getRepo() {
      return repo;
    }

    /**
      * Sets the value of the 'repo' field.
      * @param value The value of 'repo'.
      * @return This builder.
      */
    public com.github.PushEvent.Builder setRepo(com.github.Repo value) {
      validate(fields()[1], value);
      this.repoBuilder = null;
      this.repo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'repo' field has been set.
      * @return True if the 'repo' field has been set, false otherwise.
      */
    public boolean hasRepo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'repo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.github.Repo.Builder getRepoBuilder() {
      if (repoBuilder == null) {
        if (hasRepo()) {
          setRepoBuilder(com.github.Repo.newBuilder(repo));
        } else {
          setRepoBuilder(com.github.Repo.newBuilder());
        }
      }
      return repoBuilder;
    }

    /**
     * Sets the Builder instance for the 'repo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.github.PushEvent.Builder setRepoBuilder(com.github.Repo.Builder value) {
      clearRepo();
      repoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'repo' field has an active Builder instance
     * @return True if the 'repo' field has an active Builder instance
     */
    public boolean hasRepoBuilder() {
      return repoBuilder != null;
    }

    /**
      * Clears the value of the 'repo' field.
      * @return This builder.
      */
    public com.github.PushEvent.Builder clearRepo() {
      repo = null;
      repoBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'actor' field.
      * @return The value.
      */
    public com.github.Actor getActor() {
      return actor;
    }

    /**
      * Sets the value of the 'actor' field.
      * @param value The value of 'actor'.
      * @return This builder.
      */
    public com.github.PushEvent.Builder setActor(com.github.Actor value) {
      validate(fields()[2], value);
      this.actorBuilder = null;
      this.actor = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'actor' field has been set.
      * @return True if the 'actor' field has been set, false otherwise.
      */
    public boolean hasActor() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'actor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.github.Actor.Builder getActorBuilder() {
      if (actorBuilder == null) {
        if (hasActor()) {
          setActorBuilder(com.github.Actor.newBuilder(actor));
        } else {
          setActorBuilder(com.github.Actor.newBuilder());
        }
      }
      return actorBuilder;
    }

    /**
     * Sets the Builder instance for the 'actor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.github.PushEvent.Builder setActorBuilder(com.github.Actor.Builder value) {
      clearActor();
      actorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'actor' field has an active Builder instance
     * @return True if the 'actor' field has an active Builder instance
     */
    public boolean hasActorBuilder() {
      return actorBuilder != null;
    }

    /**
      * Clears the value of the 'actor' field.
      * @return This builder.
      */
    public com.github.PushEvent.Builder clearActor() {
      actor = null;
      actorBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'org' field.
      * @return The value.
      */
    public com.github.Organization getOrg() {
      return org;
    }

    /**
      * Sets the value of the 'org' field.
      * @param value The value of 'org'.
      * @return This builder.
      */
    public com.github.PushEvent.Builder setOrg(com.github.Organization value) {
      validate(fields()[3], value);
      this.orgBuilder = null;
      this.org = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'org' field has been set.
      * @return True if the 'org' field has been set, false otherwise.
      */
    public boolean hasOrg() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'org' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.github.Organization.Builder getOrgBuilder() {
      if (orgBuilder == null) {
        if (hasOrg()) {
          setOrgBuilder(com.github.Organization.newBuilder(org));
        } else {
          setOrgBuilder(com.github.Organization.newBuilder());
        }
      }
      return orgBuilder;
    }

    /**
     * Sets the Builder instance for the 'org' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.github.PushEvent.Builder setOrgBuilder(com.github.Organization.Builder value) {
      clearOrg();
      orgBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'org' field has an active Builder instance
     * @return True if the 'org' field has an active Builder instance
     */
    public boolean hasOrgBuilder() {
      return orgBuilder != null;
    }

    /**
      * Clears the value of the 'org' field.
      * @return This builder.
      */
    public com.github.PushEvent.Builder clearOrg() {
      org = null;
      orgBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public com.github.Payload getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.github.PushEvent.Builder setPayload(com.github.Payload value) {
      validate(fields()[4], value);
      this.payloadBuilder = null;
      this.payload = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'payload' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.github.Payload.Builder getPayloadBuilder() {
      if (payloadBuilder == null) {
        if (hasPayload()) {
          setPayloadBuilder(com.github.Payload.newBuilder(payload));
        } else {
          setPayloadBuilder(com.github.Payload.newBuilder());
        }
      }
      return payloadBuilder;
    }

    /**
     * Sets the Builder instance for the 'payload' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.github.PushEvent.Builder setPayloadBuilder(com.github.Payload.Builder value) {
      clearPayload();
      payloadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payload' field has an active Builder instance
     * @return True if the 'payload' field has an active Builder instance
     */
    public boolean hasPayloadBuilder() {
      return payloadBuilder != null;
    }

    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public com.github.PushEvent.Builder clearPayload() {
      payload = null;
      payloadBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'public$' field.
      * @return The value.
      */
    public java.lang.Boolean getPublic$() {
      return public$;
    }

    /**
      * Sets the value of the 'public$' field.
      * @param value The value of 'public$'.
      * @return This builder.
      */
    public com.github.PushEvent.Builder setPublic$(boolean value) {
      validate(fields()[5], value);
      this.public$ = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'public$' field has been set.
      * @return True if the 'public$' field has been set, false otherwise.
      */
    public boolean hasPublic$() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'public$' field.
      * @return This builder.
      */
    public com.github.PushEvent.Builder clearPublic$() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public java.lang.String getCreatedAt() {
      return created_at;
    }

    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public com.github.PushEvent.Builder setCreatedAt(java.lang.String value) {
      validate(fields()[6], value);
      this.created_at = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public com.github.PushEvent.Builder clearCreatedAt() {
      created_at = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PushEvent build() {
      try {
        PushEvent record = new PushEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        if (repoBuilder != null) {
          record.repo = this.repoBuilder.build();
        } else {
          record.repo = fieldSetFlags()[1] ? this.repo : (com.github.Repo) defaultValue(fields()[1]);
        }
        if (actorBuilder != null) {
          record.actor = this.actorBuilder.build();
        } else {
          record.actor = fieldSetFlags()[2] ? this.actor : (com.github.Actor) defaultValue(fields()[2]);
        }
        if (orgBuilder != null) {
          record.org = this.orgBuilder.build();
        } else {
          record.org = fieldSetFlags()[3] ? this.org : (com.github.Organization) defaultValue(fields()[3]);
        }
        if (payloadBuilder != null) {
          record.payload = this.payloadBuilder.build();
        } else {
          record.payload = fieldSetFlags()[4] ? this.payload : (com.github.Payload) defaultValue(fields()[4]);
        }
        record.public$ = fieldSetFlags()[5] ? this.public$ : (java.lang.Boolean) defaultValue(fields()[5]);
        record.created_at = fieldSetFlags()[6] ? this.created_at : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PushEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PushEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PushEvent>
    READER$ = (org.apache.avro.io.DatumReader<PushEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
